geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 0.5), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = "identity", color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = "jitter", color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(stat = "count",
mapping = aes_string(x = column,
label = paste0("..count.., ifelse(Fluoridated == 'Yes', 'Yes: ', 'No: ')", column)),
position = position_stack(vjust = 0.5),
color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(stat = "count", mapping = aes_string(x = column, label = paste0("..count.., ifelse(Fluoridated == 'Yes', 'Yes: ', 'No: ')", column)),position = position_stack(vjust = 0.5), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(stat = "count", mapping = aes_string(x = column, label = paste0("..count.., ifelse(Fluoridated == 'Yes', 'Yes: ', 'No: ')", column)),position = position_stack(vjust = 0.5), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.1), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.02), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.1), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.3), color = "black")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
per_population_served <- fluoride_df$Population_Served/1000
for (column in categorical_columns)
#create a bar chart that is stacked
{categorical_bar <- ggplot(fluoride_df, aes_string(x = column, y = per_population_served, fill = "Fluoridated")) +
geom_col( position = "stack") +
scale_fill_manual(values = c("Yes" = "grey", "No" = "brown")) +
labs(title = paste("Total Population Served by", column), x = column, y = "total per 1000 Persons")
print(categorical_bar)}
for (column in categorical_columns) {categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the operation is used
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated by", column), x = column, y = "Count") +
#create text to express total_count for that category
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
#view the flow data report for 2023
flow_data_report <- read_csv("../Clean_Data/Flow_Data_Report_2023_V1.csv")
library(tidyverse)
#view the fluoride data set
fluoride_df <- read_csv("../Clean_Data/Flouride_2019-2023.csv")
glimpse(fluoride_df)
#rename columns
fluoride_df <- fluoride_df %>% rename("PWS_ID"="PWS ID" ,"PWS_Name"="PWS Name","Population_Served"="Population Served","Fluoride_Product"="Fluoride Product","Water_Source"= "Water Source")
#There are 1632 distinct PWS present in the state of Florida between 2019-2023
distinct_pws_ids <- fluoride_df %>% distinct(`PWS_ID`)
#Key features that can be used beyond serving as an id or location are [status,population_served,fluoride_product,fluoridated,water_source]
#It seems that all locations of pws only have primary counties and don't have association with a secondary or tertiary
primary_county_count <- length(fluoride_df$County)- sum(grepl("Primary",fluoride_df$County,ignore.case=TRUE))
distinct_pws_name <- fluoride_df %>% distinct(`PWS_Name`)
#look at individual categorical counts
status_value_counts <- fluoride_df %>% count(`Status`)
fluoride_product_value_counts <- fluoride_df %>% count(`Fluoride_Product`)
water_source_value_counts <- fluoride_df %>% count(`Water_Source`)
categorical_value_counts <- fluoride_df %>% count(Status,`Fluoride_Product`,`Water_Source`)
categorical_columns <- list("Status","Fluoride_Product","Water_Source","year")
#S#The amount of fluoridated PWS stay consistent throughout the 5 years
#S#Ground water seems to be the most abundant form of water source, with majority PWS not being fluoridated, surface is marginally more noticeable in count that mixed and unknown but dwarfed by Ground count
#S#only natural for fluoride product has a noticeable amount of non-fluoridation with
#S#Fluoridated status shows that the consecutive status aren't always fluoridated but lean towards it
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
{categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the operation is used
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated PWS by", column), x = column, y = "Count") +
#create text to express total_count for that category
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
#Divide population served by 1000 to make information easier to understand on a graph
per_thousand_population_served <- fluoride_df$Population_Served/1000
#S# Adjusted status serves a majority of Floridians while being only fluoridated
#S# H2SiF6 serves the most amount people where NaF actually serves next to no one
#S# Most Floridians get their water from the ground with a majority being fluoridated
#S# Population served is constantly growing, with a marginal jump from 2020 to 2021
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
#create a bar chart that is stacked where sum is the operation used
{categorical_bar <- ggplot(fluoride_df, aes_string(x = column, y = per_thousand_population_served, fill = "Fluoridated")) +
geom_col( position = "stack") +
#have binary columns for specific colors
scale_fill_manual(values = c("Yes" = "grey", "No" = "brown")) +
#create labels
labs(title = paste("Total Population Served by", column), x = column, y = "Total per 1000 persons")
print(categorical_bar)}
flow_data_report <- read_csv("../Clean_Data/Flow_Data_Report_2023_V1.csv")
glimpse(flow_data_report)
flow_data_report$REPORTDATE <- ymd(paste0(flow_data_report$REPORTDATE,"01"))
#Majority of plants are active, with 3 other categories:closed,deleted,inactive. Could make closed and deleted to inactive to have a boolean expression
plant_status_vc <- flow_data_report %>% count(`PLANTSTATUS`)
# The DEP district, 1, has the highest amount of plants
plant_number_vc <- flow_data_report %>% count(`PLANTNUMBER`)
#the CD office contains the highest amount of water systems
plant_office_vc <- flow_data_report %>% count(`OFFICE`)
#Even though there are 3749 unique plants  to take into account, there are more than 4000 reports taken each month indicating some plants may be reported on more frequently
month_report_taken <- flow_data_report %>% count(`REPORTDATE`)
flow_data_report$PWSID %>% n_distinct()
#only 2106 reports have 0 as the max and average for their plant's treatment, suggesting there might be a reason for inactivity, but those plants don't matter entirely
flow_data_report %>% filter(MAX_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0 & MAX_TREATED == 0) %>% summarise(count=n())
#there might be a correlation between the amount of occurrences that are negligible between max,avg treatment and design capacity
flow_data_report %>% filter(DESIGNCAPCITY <= 1) %>% summarise(count=n())
#create a sub data frame that holds the mean values for each metric by the office they are in per million; easier for visualization
office_chart <- flow_data_report %>% group_by(OFFICE) %>% summarise(DesignCapacity_mean=mean(DESIGNCAPCITY)/100000,AvgTreatment_mean=mean(AVG_TREATED)/100000,MaxTreatment_mean=mean(MAX_TREATED)/100000)
#obtain label for those metrics
office_factors <- colnames(office_chart)[2:4]
#loop through each label
for (column in office_factors)
{
office_bar <- ggplot(data = office_chart, aes_string(x = "OFFICE", y = column,fill="OFFICE")) + #color code each office and create a plot based on each label
geom_bar(stat = "identity") +
scale_fill_hue(c = 42) # hue for color schemeing
print(office_bar)
}
#extract the labels
monthly_factors <- c("DESIGNCAPCITY","MAX_TREATED","AVG_TREATED")
#create a sub set dataframe for monthly analysis
monthly_df <- flow_data_report %>% select(REPORTDATE,OFFICE,DESIGNCAPCITY,MAX_TREATED,AVG_TREATED)
#divide the factors, so it's per million; easier for visualization
for (factor in monthly_factors)
{monthly_df[[factor]] <- monthly_df[[factor]]/100000}
#create plots based on each factor
for (column in monthly_factors)
{
monthly_plot <- ggplot(data=monthly_df,aes_string(x="REPORTDATE",y=column,fill="OFFICE")) +
geom_bar(position="stack",stat="identity") +
labs(fill = "Office",y = paste(column, "\n per million")) + #notify that its per million
ggtitle(paste("Total across 2023 for", column)) #establish summation as method
print(monthly_plot)
}
library(tidyverse)
#view the fluoride data set
fluoride_df <- read_csv("../Clean_Data/Flouride_2019-2023.csv")
library(tidyverse)
#view the fluoride data set
fluoride_df <- read_csv("../Clean_Data/Fluoride_2019-2023.csv")
glimpse(fluoride_df)
#rename columns
fluoride_df <- fluoride_df %>% rename("PWS_ID"="PWS ID" ,"PWS_Name"="PWS Name","Population_Served"="Population Served","Fluoride_Product"="Fluoride Product","Water_Source"= "Water Source")
#There are 1632 distinct PWS present in the state of Florida between 2019-2023
distinct_pws_ids <- fluoride_df %>% distinct(`PWS_ID`)
#Key features that can be used beyond serving as an id or location are [status,population_served,fluoride_product,fluoridated,water_source]
#It seems that all locations of pws only have primary counties and don't have association with a secondary or tertiary
primary_county_count <- length(fluoride_df$County)- sum(grepl("Primary",fluoride_df$County,ignore.case=TRUE))
distinct_pws_name <- fluoride_df %>% distinct(`PWS_Name`)
#look at individual categorical counts
status_value_counts <- fluoride_df %>% count(`Status`)
fluoride_product_value_counts <- fluoride_df %>% count(`Fluoride_Product`)
water_source_value_counts <- fluoride_df %>% count(`Water_Source`)
categorical_value_counts <- fluoride_df %>% count(Status,`Fluoride_Product`,`Water_Source`)
categorical_columns <- list("Status","Fluoride_Product","Water_Source","year")
#S#The amount of fluoridated PWS stay consistent throughout the 5 years
#S#Ground water seems to be the most abundant form of water source, with majority PWS not being fluoridated, surface is marginally more noticeable in count that mixed and unknown but dwarfed by Ground count
#S#only natural for fluoride product has a noticeable amount of non-fluoridation with
#S#Fluoridated status shows that the consecutive status aren't always fluoridated but lean towards it
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
{categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the operation is used
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated PWS by", column), x = column, y = "Count") +
#create text to express total_count for that category
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
#Divide population served by 1000 to make information easier to understand on a graph
per_thousand_population_served <- fluoride_df$Population_Served/1000
#S# Adjusted status serves a majority of Floridians while being only fluoridated
#S# H2SiF6 serves the most amount people where NaF actually serves next to no one
#S# Most Floridians get their water from the ground with a majority being fluoridated
#S# Population served is constantly growing, with a marginal jump from 2020 to 2021
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
#create a bar chart that is stacked where sum is the operation used
{categorical_bar <- ggplot(fluoride_df, aes_string(x = column, y = per_thousand_population_served, fill = "Fluoridated")) +
geom_col( position = "stack") +
#have binary columns for specific colors
scale_fill_manual(values = c("Yes" = "grey", "No" = "brown")) +
#create labels
labs(title = paste("Total Population Served by", column), x = column, y = "Total per 1000 persons")
print(categorical_bar)}
"-----------------------------------------------------------------------------------------------------------------------------------------------------"
#view the flow data report for 2023
flow_data_report <- read_csv("../Clean_Data/Flow_Data_Report_2023_V1.csv")
glimpse(flow_data_report)
flow_data_report$REPORTDATE <- ymd(paste0(flow_data_report$REPORTDATE,"01"))
#Majority of plants are active, with 3 other categories:closed,deleted,inactive. Could make closed and deleted to inactive to have a boolean expression
plant_status_vc <- flow_data_report %>% count(`PLANTSTATUS`)
# The DEP district, 1, has the highest amount of plants
plant_number_vc <- flow_data_report %>% count(`PLANTNUMBER`)
#the CD office contains the highest amount of water systems
plant_office_vc <- flow_data_report %>% count(`OFFICE`)
#Even though there are 3749 unique plants  to take into account, there are more than 4000 reports taken each month indicating some plants may be reported on more frequently
month_report_taken <- flow_data_report %>% count(`REPORTDATE`)
flow_data_report$PWSID %>% n_distinct()
#only 2106 reports have 0 as the max and average for their plant's treatment, suggesting there might be a reason for inactivity, but those plants don't matter entirely
flow_data_report %>% filter(MAX_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0 & MAX_TREATED == 0) %>% summarise(count=n())
#there might be a correlation between the amount of occurrences that are negligible between max,avg treatment and design capacity
flow_data_report %>% filter(DESIGNCAPCITY <= 1) %>% summarise(count=n())
#create a sub data frame that holds the mean values for each metric by the office they are in per million; easier for visualization
office_chart <- flow_data_report %>% group_by(OFFICE) %>% summarise(DesignCapacity_mean=mean(DESIGNCAPCITY)/100000,AvgTreatment_mean=mean(AVG_TREATED)/100000,MaxTreatment_mean=mean(MAX_TREATED)/100000)
#obtain label for those metrics
office_factors <- colnames(office_chart)[2:4]
#loop through each label
for (column in office_factors)
{
office_bar <- ggplot(data = office_chart, aes_string(x = "OFFICE", y = column,fill="OFFICE")) + #color code each office and create a plot based on each label
geom_bar(stat = "identity") +
scale_fill_hue(c = 42) # hue for color schemeing
print(office_bar)
}
#extract the labels
monthly_factors <- c("DESIGNCAPCITY","MAX_TREATED","AVG_TREATED")
#create a sub set dataframe for monthly analysis
monthly_df <- flow_data_report %>% select(REPORTDATE,OFFICE,DESIGNCAPCITY,MAX_TREATED,AVG_TREATED)
#divide the factors, so it's per million; easier for visualization
for (factor in monthly_factors)
{monthly_df[[factor]] <- monthly_df[[factor]]/100000}
#create plots based on each factor
for (column in monthly_factors)
{
monthly_plot <- ggplot(data=monthly_df,aes_string(x="REPORTDATE",y=column,fill="OFFICE")) +
geom_bar(position="stack",stat="identity") +
labs(fill = "Office",y = paste(column, "\n per million")) + #notify that its per million
ggtitle(paste("Total across 2023 for", column)) #establish summation as method
print(monthly_plot)
}
"--------------------------------------------------------------------------------------------------------------------------------------------------"
plant_treatment_report <- read_csv("../Clean_Data/Plant_Treatment_Report_2023_V1.csv")
#Process ID and objective ID would be nice details to look at but I lack knowledge as there wasn't much documentation on it
#The process objective description is the most relevant part in this data frame
proces_obj_desc_count <- plant_treatment_report %>% count(PROCESSOBJECTIVEDESC) %>% arrange(desc(n))
"---------------------------------------------------------------------------------------------------------------------------------------------------"
microbiological_report <- read_csv("../Clean_Data/Microbiological_Report_2023_V1.csv")
system_type_count <- microbiological_report %>% count(SYSTEMTYPE)
system_status_count <- microbiological_report %>% count(SYSTEMSTATUS)
sample_type_count <- microbiological_report %>% count(SAMPLETYPE)
sample_required_count <- microbiological_report %>% count(SAMPLESREQUIRED)
sample_taken_count <- microbiological_report %>% count(SAMPLESTAKEN)
sample_date_count <- microbiological_report %>% count(SAMPLEDATE)
method_count <- microbiological_report %>% count(METHOD)
microbiological_report <- microbiological_report %>%
mutate(CHLORINERESIDUAL_Present = is.na(CHLORINERESIDUAL)
|is.numeric(CHLORINERESIDUAL))
"---------------------------------------------------------------------------------------------------------------------------------------------------"
chemical_report <- read_csv("../Clean_Data/Chemical_Report_2023_V1.csv")
View(chemical_report)
View(chemical_report)
chemical_report %>% count(SYSTEMTYPE)
subparth_count <- chemical_report %>% count(SUBPARTH)
View(subparth_count)
library(tidyverse)
#view the fluoride data set
fluoride_df <- read_csv("../Clean_Data/Fluoride_2019-2023.csv")
glimpse(fluoride_df)
#rename columns
fluoride_df <- fluoride_df %>% rename("PWS_ID"="PWS ID" ,"PWS_Name"="PWS Name","Population_Served"="Population Served","Fluoride_Product"="Fluoride Product","Water_Source"= "Water Source")
#There are 1632 distinct PWS present in the state of Florida between 2019-2023
distinct_pws_ids <- fluoride_df %>% distinct(`PWS_ID`)
#Key features that can be used beyond serving as an id or location are [status,population_served,fluoride_product,fluoridated,water_source]
#It seems that all locations of pws only have primary counties and don't have association with a secondary or tertiary
primary_county_count <- length(fluoride_df$County)- sum(grepl("Primary",fluoride_df$County,ignore.case=TRUE))
distinct_pws_name <- fluoride_df %>% distinct(`PWS_Name`)
#look at individual categorical counts
status_value_counts <- fluoride_df %>% count(`Status`)
fluoride_product_value_counts <- fluoride_df %>% count(`Fluoride_Product`)
water_source_value_counts <- fluoride_df %>% count(`Water_Source`)
categorical_value_counts <- fluoride_df %>% count(Status,`Fluoride_Product`,`Water_Source`)
categorical_columns <- list("Status","Fluoride_Product","Water_Source","year")
#S#The amount of fluoridated PWS stay consistent throughout the 5 years
#S#Ground water seems to be the most abundant form of water source, with majority PWS not being fluoridated, surface is marginally more noticeable in count that mixed and unknown but dwarfed by Ground count
#S#only natural for fluoride product has a noticeable amount of non-fluoridation with
#S#Fluoridated status shows that the consecutive status aren't always fluoridated but lean towards it
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
{categorical_bar <- ggplot(data=fluoride_df) +
#create a bar chart that is stacked, where count is the operation is used
geom_bar(mapping=aes_string(x=column,fill="Fluoridated"),position="stack") +
# Have the binary column associated with specific colors
scale_fill_manual(values=c("Yes"="grey","No"="maroon")) +
#create labels for each plot
labs(title = paste("Counts of Fluoridated PWS by", column), x = column, y = "Count") +
#create text to express total_count for that category
geom_text(aes_string(x = column,label = "..count.."),stat = "count", position = position_stack(vjust = 1.05), color = "black")
print(categorical_bar)}
#Divide population served by 1000 to make information easier to understand on a graph
per_thousand_population_served <- fluoride_df$Population_Served/1000
#S# Adjusted status serves a majority of Floridians while being only fluoridated
#S# H2SiF6 serves the most amount people where NaF actually serves next to no one
#S# Most Floridians get their water from the ground with a majority being fluoridated
#S# Population served is constantly growing, with a marginal jump from 2020 to 2021
#initialize loop to create a plot for each categorical column
for (column in categorical_columns)
#create a bar chart that is stacked where sum is the operation used
{categorical_bar <- ggplot(fluoride_df, aes_string(x = column, y = per_thousand_population_served, fill = "Fluoridated")) +
geom_col( position = "stack") +
#have binary columns for specific colors
scale_fill_manual(values = c("Yes" = "grey", "No" = "brown")) +
#create labels
labs(title = paste("Total Population Served by", column), x = column, y = "Total per 1000 persons")
print(categorical_bar)}
"-----------------------------------------------------------------------------------------------------------------------------------------------------"
#view the flow data report for 2023
flow_data_report <- read_csv("../Clean_Data/Flow_Data_Report_2023_V1.csv")
glimpse(flow_data_report)
flow_data_report$REPORTDATE <- ymd(paste0(flow_data_report$REPORTDATE,"01"))
#Majority of plants are active, with 3 other categories:closed,deleted,inactive. Could make closed and deleted to inactive to have a boolean expression
plant_status_vc <- flow_data_report %>% count(`PLANTSTATUS`)
# The DEP district, 1, has the highest amount of plants
plant_number_vc <- flow_data_report %>% count(`PLANTNUMBER`)
#the CD office contains the highest amount of water systems
plant_office_vc <- flow_data_report %>% count(`OFFICE`)
#Even though there are 3749 unique plants  to take into account, there are more than 4000 reports taken each month indicating some plants may be reported on more frequently
month_report_taken <- flow_data_report %>% count(`REPORTDATE`)
flow_data_report$PWSID %>% n_distinct()
#only 2106 reports have 0 as the max and average for their plant's treatment, suggesting there might be a reason for inactivity, but those plants don't matter entirely
flow_data_report %>% filter(MAX_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0) %>% summarise(count=n())
flow_data_report %>% filter(AVG_TREATED == 0 & MAX_TREATED == 0) %>% summarise(count=n())
#there might be a correlation between the amount of occurrences that are negligible between max,avg treatment and design capacity
flow_data_report %>% filter(DESIGNCAPCITY <= 1) %>% summarise(count=n())
#create a sub data frame that holds the mean values for each metric by the office they are in per million; easier for visualization
office_chart <- flow_data_report %>% group_by(OFFICE) %>% summarise(DesignCapacity_mean=mean(DESIGNCAPCITY)/100000,AvgTreatment_mean=mean(AVG_TREATED)/100000,MaxTreatment_mean=mean(MAX_TREATED)/100000)
#obtain label for those metrics
office_factors <- colnames(office_chart)[2:4]
#loop through each label
for (column in office_factors)
{
office_bar <- ggplot(data = office_chart, aes_string(x = "OFFICE", y = column,fill="OFFICE")) + #color code each office and create a plot based on each label
geom_bar(stat = "identity") +
scale_fill_hue(c = 42) # hue for color schemeing
print(office_bar)
}
#extract the labels
monthly_factors <- c("DESIGNCAPCITY","MAX_TREATED","AVG_TREATED")
#create a sub set dataframe for monthly analysis
monthly_df <- flow_data_report %>% select(REPORTDATE,OFFICE,DESIGNCAPCITY,MAX_TREATED,AVG_TREATED)
#divide the factors, so it's per million; easier for visualization
for (factor in monthly_factors)
{monthly_df[[factor]] <- monthly_df[[factor]]/100000}
#create plots based on each factor
for (column in monthly_factors)
{
monthly_plot <- ggplot(data=monthly_df,aes_string(x="REPORTDATE",y=column,fill="OFFICE")) +
geom_bar(position="stack",stat="identity") +
labs(fill = "Office",y = paste(column, "\n per million")) + #notify that its per million
ggtitle(paste("Total across 2023 for", column)) #establish summation as method
print(monthly_plot)
}
"--------------------------------------------------------------------------------------------------------------------------------------------------"
plant_treatment_report <- read_csv("../Clean_Data/Plant_Treatment_Report_2023_V1.csv")
#Process ID and objective ID would be nice details to look at but I lack knowledge as there wasn't much documentation on it
#The process objective description is the most relevant part in this data frame
proces_obj_desc_count <- plant_treatment_report %>% count(PROCESSOBJECTIVEDESC) %>% arrange(desc(n))
"---------------------------------------------------------------------------------------------------------------------------------------------------"
microbiological_report <- read_csv("../Clean_Data/Microbiological_Report_2023_V1.csv")
system_type_count <- microbiological_report %>% count(SYSTEMTYPE)
system_status_count <- microbiological_report %>% count(SYSTEMSTATUS)
sample_type_count <- microbiological_report %>% count(SAMPLETYPE)
sample_required_count <- microbiological_report %>% count(SAMPLESREQUIRED)
sample_taken_count <- microbiological_report %>% count(SAMPLESTAKEN)
sample_date_count <- microbiological_report %>% count(SAMPLEDATE)
method_count <- microbiological_report %>% count(METHOD)
microbiological_report <- microbiological_report %>%
mutate(CHLORINERESIDUAL_Present = is.na(CHLORINERESIDUAL)
|is.numeric(CHLORINERESIDUAL))
"---------------------------------------------------------------------------------------------------------------------------------------------------"
chemical_report <- read_csv("../Clean_Data/Chemical_Report_2023_V1.csv")
#each unique data point is associated with a differing report for each sample report
#sample date can be used as group by filter
subparth_count <- chemical_report %>% count(SUBPARTH)
contam_group_count <- chemical_report %>% count(CONTAMGROUP)
View(categorical_value_counts)
View(chemical_report)
View(plant_treatment_report)
View(chemical_report)
